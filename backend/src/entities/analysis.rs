//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "analysis")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub sample_uuid: Uuid,
    pub sandbox_name: String,
    pub submission_name: Option<String>,
    pub date: DateTime,
    pub src_ip: String,
    pub status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sample::Entity",
        from = "Column::SampleUuid",
        to = "super::sample::Column::Uuid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Sample,
}

impl Related<super::sample::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sample.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
