//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(ToSchema, Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sample")]
#[schema(title = "Sample")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    #[sea_orm(unique)]
    pub md5: String,
    #[sea_orm(unique)]
    pub sha1: String,
    #[sea_orm(unique)]
    pub sha256: String,
    #[sea_orm(unique)]
    pub sha512: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::analysis::Entity")]
    Analysis,
}

impl Related<super::analysis::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Analysis.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
